Just a file to hopefully clear up some potential confusions in the codebase.

File Notes:

	full_game.py:
		- code that starts playing games
		- can queue up multiple games, but easier to see the outcome and course of a game if only one game is queued up
		- play_full_game() is a call to the function in fireplace/utils.py

	fireplace/utils.py:
		- play_full_game()
			- it calls setup_game() in the same file
		- setup_game()
			- this makes the decks and sets the players with their respective decks
			- makes a Game(p1, p2) object and then proceeds to call game.start() in fireplace/game.py 
				- *** IMPORTANT *** 
					- for some reason, this does not call the start() function in class BaseGame
					- it calls start() func in class MulliganRules in fireplace/game.py
						- *** IMPORTANT ***
							- in here, it calls self.setup() which leads to BaseGame.setup()
							- from .setup() it calls self.pick_first_player() *BUT* there are *TWO* pick_first_player()
						  	  in game.py: one in BaseGame and one in class CoinRules
							- one would think that it's the one in BaseGame, *BUT* it's *NOT*. It calls the one in CoinRules
		- random_draft()
			- fixed random draft, works for all cards now

	fireplace/game.py:
		- see the sections above with *** IMPORTANT *** tab
		- after MulliganRules completes the mulligan phase, it calls self.begin_turn(p1)
			- this *DOES NOT* go to BaseGame.begin_turn(), it will first go to CoinRules.begin_turn
	


General Notes:
	- Everything is an Entity and every Entity is in a Zone
	- Heros are Characters (Players are NOT == to Heroes, Heroes and their respective hero power are summoned by Players)
	- Seems like we often have self.controller to denote who "controls" that card, character, etc.
	- When trying to print out stuff, certain files just use print(message), others need self.log(message) - just do a ctrl-f to see which ones are used in the file
	- Have hearthstone.enums pulled up in web browser at all times, useful to see the fields
